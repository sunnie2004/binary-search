Leetcode74 Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
•	Integers in each row are sorted from left to right.
•	The first integer of each row is greater than the last integer of the previous row.
Example 1:
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
•	SOLUTION1
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
          
        if matrix:        
            rows = len(matrix)
            cols = len(matrix[0])
        else:
            return False              #empty list:[]
        
        if cols == 0:                #[[]]
            return False
        
        if target < matrix[0][0] or target > matrix[rows-1][cols-1]:
            return False               #out of range
 
        nums = []
        for i in range(0,rows):
            if target < matrix[i][cols-1]: #get the row that target will be in
                for j in range(0,cols):
                    nums.append(matrix[i][j]) #copy the row 
                break
            elif target == matrix[i][cols-1]:
                return True
        left = 0
        right = cols-1
        while left <= right:
            mid = left + (right-left)//2
            if nums[mid] == target:
                return True
            elif nums[mid] > target:
                right = mid-1
            else:
                left =  mid +1
        return False
•	SOLUTION2
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
          
        if matrix:        
            rows = len(matrix)
            cols = len(matrix[0])
        else:
            return False              #empty list:[]
        
        if cols == 0:                #[[]]
            return False
        
        if target < matrix[0][0] or target > matrix[rows-1][cols-1]:
            return False               #out of range
              
        for i in range(0,rows):
            if target > matrix[i][cols-1]:
                continue                       #save memory
            left = 0
            right = cols-1
            while left <= right:
                mid = left + (right-left)//2
                if matrix[i][mid] == target:
                    return True
                elif matrix[i][mid] > target:
                    right = mid-1
                else:
                    left =  mid +1
            return False
