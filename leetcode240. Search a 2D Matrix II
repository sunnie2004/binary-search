240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
•	Integers in each row are sorted in ascending from left to right.
•	Integers in each column are sorted in ascending from top to bottom.
Example:
Consider the following matrix:
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if matrix:
            rows = len(matrix)
            cols = len(matrix[0])
        else:
            return False       #empty list
        
        i = 0            #count row
        j = cols-1
        
        while i <rows and j>=0:   #from right upper corner
            if matrix[i][j] > target:  
                j -= 1
                
            elif matrix[i][j] < target: #row++
                i +=1
            else:
                return True
        return False
