33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

•	SOLUTION1
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """

        if nums:            
            left = 0
            length = len(nums)
            right = length-1
        else:              #empty list
            return -1
        
        while left <= right:
            mid = left + (right- left)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] >= nums[left]:   # left side is ascending order
                if target >= nums[left] and target < nums[mid]:
                    right = mid-1
                else:
                    left = mid+1
            else:
                if target > nums[mid] and target <= nums[right]:
                    left = mid+1
                else:
                    right = mid-1
        return -1
•	SOLUTION2
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """

        if nums:            
            left = 0
            length = len(nums)
            right = length-1
        else:              #empty list
            return -1
        
        while (left+1) < right:
            mid = left + (right- left)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] >= nums[left]:   # left side is ascending order
                if target >= nums[left] and target <= nums[mid]:
                    right = mid
                else:
                    left = mid
            else:
                if target >= nums[mid] and target <= nums[right]:
                    left = mid
                else:
                    right = mid
       #check pointer left next to right pointer
        if nums[left] == target:
            return left
        elif nums[right] ==  target:
            return right
        else:
            return -1
