154. Find Minimum in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).
Find the minimum element.
The array may contain duplicates.
Input: [2,2,2,0,1]
Output: 0
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left = 0
        length = len(nums)
        right = length-1
        
        MinNumber = nums[0]   #assume first one is smallest 
        
        while (left+1) < right:
            mid = left + (right-left)//2            
            if nums[mid] > nums[right]:
                left = mid
                if nums[right] < MinNumber:
                    MinNumber = nums[right]
                    
            elif nums[mid] < nums[right]:
                right = mid
                MinNumber = nums[mid] #replace it after finding smaller one
            else:                     #duplicate
                if nums[mid] > nums[left] and nums[left] < MinNumber:
                    MinNumber = nums[left]
                    left +=1
                else:
                    left +=1
                
        return min(nums[left],nums[right],MinNumber)
